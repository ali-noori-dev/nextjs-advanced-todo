@use "sass:color";
@use "@/styles/variables";
@use "styles/functions";

.input {
  position: relative;
  gap: functions.spacing();

  &--full-width {
    width: 100%;
  }

  &--error {
    .input__container {
      border-color: variables.$error-color;
    }

    .input__label {
      color: variables.$error-color;
    }
  }

  &--disabled {
    .input__container {
      cursor: not-allowed;
      opacity: 0.7;
    }

    .input__field {
      cursor: not-allowed;
    }
  }

  &:hover:not(.input--disabled):not(:focus-within) {
    .input__container {
      border-color: color.scale(variables.$border-color, $lightness: -30%);
    }
  }

  &__container {
    position: relative;
    border: 1px solid variables.$border-color;
    border-radius: variables.$border-radius-md;
    padding: functions.spacing() functions.spacing(3);

    &:focus-within {
      border-color: variables.$primary;
      outline: 1px solid variables.$primary;
    }

    // If a label exists, hide the placeholder by default
    &--labeled {
      .input__field::placeholder {
        color: transparent;
      }
    }
  }

  &__field {
    width: 100%;
    border: none;
    outline: none;
    padding: functions.spacing(2) 0;

    // Show the placeholder only when the label is floating
    &:focus::placeholder,
    &:not(:placeholder-shown) ~ .input__label + &::placeholder {
      color: variables.$text-muted-color;
    }

    // Handle label floating
    &:focus ~ .input__label,
    &:not(:placeholder-shown) ~ .input__label,
    // Handle autofill case
    &:-webkit-autofill ~ .input__label {
      top: 0px;
      font-size: variables.$font-size-xs;
    }

    &:focus ~ .input__label {
      color: variables.$primary;
    }

    // Ensure auto-filled input is properly styled
    &:-webkit-autofill {
      background-clip: text;
    }
  }

  &__label {
    position: absolute;
    left: functions.spacing(3);
    top: 50%;
    transform: translateY(-50%);
    color: variables.$text-muted-color;
    background: white;
    padding: 0 functions.spacing();
    pointer-events: none;
    transition: all 0.2s ease-in-out;
  }

  &__helper {
    font-size: variables.$font-size-sm;
    color: variables.$error-color;
    margin-left: functions.spacing(2);
  }
}
